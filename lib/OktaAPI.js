/**
 * Created by jjohnson on 12/9/13.
 */
var NetworkAbstraction = require('./NetworkAbstraction.js');

module.exports = OktaAPI;
OktaAPI.Helpers = require('./OktaHelpers.js');
/**
 * Instantiate a new Okta API session with the given API token
 * @param apiToken
 * @param domain
 * @param preview
 * @constructor
 */
function OktaAPI(apiToken, domain, preview) {
    if(apiToken == undefined || domain == undefined) {
        throw new Error("OktaAPI requires an API token and a domain");
    }
    this.domain = domain;
    if(preview == undefined) this.preview = false;
    else this.preview = preview;
    this.request = new NetworkAbstraction(apiToken, domain, preview);
}

/*
 * Okta User Endpoint
 * https://github.com/okta/api/blob/master/docs/endpoints/users.md @ d526641
 */
/**
 * Gets a list of users in your Okta
 * @method getUsers
 * @param callback
 */
OktaAPI.prototype.getUsers = function(callback) {
   this.request.get("users", null, callback);
}
/**
 * Searches your Okta for a specific user
 * @method getUser
 * @param who search query
 * @param callback
 */
OktaAPI.prototype.getUser = function(who, callback) {
    if(who == undefined) throw new Error("A search query is required when trying to get a user from Okta");
    this.request.get("users/" + who, null, callback);
}
/**
 * Provisions a user to your Okta
 * @method addUser
 * @param profile a profile object, usually generated by OktaAPI.Helpers.constructProfile()
 * @param credentials a credentials object, usually generated by OktaAPI.Helpers.constructCredentials()
 * @param activate whether or not to fully activate this account
 * @param callback
 */
OktaAPI.prototype.addUser = function(profile, credentials, activate, callback) {
    if(profile == undefined) throw new Error("Profile is required when adding a user to Okta");
    var body = {profile: profile};
    if(credentials) body.credentials = credentials;
    if(activate) body.activate = activate;
    this.request.post("users", body, null, callback);
}
/**
 * Update a user's profile
 * @method updateUser
 * @param id id of the user to update
 * @param profile the new, complete profile of this user
 * @param credentials the new, complete credentials of this user
 * @param callback
 */
OktaAPI.prototype.updateUser = function(id, profile, credentials, callback) {
    if(id == undefined) throw new Error("A user ID is required when updating a user in Okta");
    var body = {};
    if(credentials) body.credentials = credentials;
    if(profile) body.profile = profile;
    this.request.put("users/" + id, body, null, callback);
}
/**
 * Get the apps that this user has on their dashboard
 * @method getAppLinks
 * @param id id of the user
 * @param callback
 */
OktaAPI.prototype.getAppLinks = function(id, callback) {
    if(id == undefined) throw new Error("A user ID is required when requesting app links from Okta");
    this.request.get("users/" + id + "/appLinks", null, callback);
}
/**
 * get the groups that this user is in
 * @method getMemberGroups
 * @param id
 * @param callback
 */
OktaAPI.prototype.getMemberGroups = function(id, callback) {
    if(id == undefined) throw new Error("A user ID is required when requesting a user's groups");
    this.request.get("users/" + id + "/groups", null, callback);
}
/**
 * fully activate a user
 * @method activateUser
 * @param id the ID of the user
 * @param sendEmail whether or not to send the activation e-mail
 * @param callback
 */
OktaAPI.prototype.activateUser = function(id, sendEmail, callback) {
    if(id == undefined) throw new Error("A user ID is required when activating a user");
    if(sendEmail == undefined) throw new Error();
    var queryObj = {sendEmail: sendEmail};
    this.request.post("users/" + id + "/lifecycle/activate", null, queryObj, callback);
}
/**
 * deactivate a user; destructively deprovisioning all their accounts
 * @method deactivateUser
 * @param id
 * @param callback
 */
OktaAPI.prototype.deactivateUser = function(id, callback) {
    if(id == undefined) throw new Error("A user ID is required when deactivating a user");
    this.request.post("users/" + id + "/lifecycle/deactivate", null, null, callback);
}
/**
 * Nullify a lockout from too many failed passwords
 * @method unlockUser
 * @param id
 * @param callback
 */
OktaAPI.prototype.unlockUser = function(id, callback) {
    if(id == undefined) throw new Error("A user ID is required when unlocking a user");
    this.request.post("/users/" + id + "/lifecycle/unlock", null, null, callback);
}
/**
 * Have Okta generate a one-time-token for a password reset
 * @method resetPassword
 * @param id
 * @param sendEmail send an email with the reset token
 * @param callback
 */
OktaAPI.prototype.resetPassword = function(id, sendEmail, callback) {
    if(id == undefined) throw new Error("A user ID is required when resetting a users password");
    if(sendEmail == undefined) throw new Error();
    var queryObj = {sendEmail: sendEmail};
    this.request.post("users/" + id + "/lifecycle/reset_password", null, queryObj, callback);
}
/**
 * Have Okta generate a one-time-token for the forgotten password flow (requires security question)
 * @method forgotPassword
 * @param id
 * @param sendEmail
 * @param callback
 */
OktaAPI.prototype.forgotPassword = function(id, sendEmail, callback) {
    if(id == undefined) throw new Error("A user ID is required when triggering a forgotten password flow");
    if(sendEmail == undefined) throw new Error();
    var queryObj = {sendEmail: sendEmail};
    this.request.post("users/" + id + "/lifecycle/forgot_password", null, queryObj, callback);
}
/**
 * Sets a new password for a user by validating the recoveryQuestionObj against Okta
 * @method attemptResetPassword
 * @param id
 * @param passwordObj
 * @param recoveryQuestionObj
 * @param callback
 */
OktaAPI.prototype.attemptResetPassword = function(id, passwordObj, recoveryQuestionObj, callback) {
    if(id == undefined) throw new Error("A user ID is required when resetting a users password");
    if(passwordObj == undefined) throw new Error("A new password is required to reset a users password");
    if(recoveryQuestionObj == undefined) throw new Error("A security answer is required while resetting a users password");
    var body = {};
    body.password = passwordObj;
    body.recovery_question = recoveryQuestionObj;
    this.request.post("users/" + id + "/credentials/forgot_password", body, null, callback);
}
/**
 * Validates the provided password against Okta and changes it to the new password
 * @method attemptChangePassword
 * @param id
 * @param oldPasswordObj
 * @param newPasswordObj
 * @param callback
 */
OktaAPI.prototype.attemptChangePassword = function(id, oldPasswordObj, newPasswordObj, callback) {
    if(id == undefined) throw new Error("A user ID is required when changing a users password");
    if(oldPasswordObj == undefined) throw new Error("A current password object is required when resetting a users password");
    if(newPasswordObj == undefined) throw new Error("A new password object is required when changing a users password");
    var body = {};
    body.oldPassword = oldPasswordObj;
    body.newPassword = newPasswordObj;
    this.request.post("users/" + id + "/credentials/change_password", body, null, callback);
}
/**
 * Validates the provided password against Okta and changes the recovery question
 * @method attemptChangeRecoveryQuestion
 * @param id
 * @param passwordObj
 * @param recoveryQuestionObj
 * @param callback
 */
OktaAPI.prototype.attemptChangeRecoveryQuestion = function(id, passwordObj, recoveryQuestionObj, callback) {
    if(id == undefined) throw new Error("A user ID is required when changing a users recovery questions");
    if(passwordObj == undefined) throw new Error("A current password object is required when changing a users recovery question");
    if(recoveryQuestionObj == undefined) throw new Error("A recovery question object is required when changing a users recovery question");
    var body = {};
    body.password = passwordObj;
    body.recovery_question = recoveryQuestionObj;
    this.request.post("users/" + id + "/credentials/change_recovery_question", body, null, callback);
}

/*
 * Okta Events Endpoint
 * https://github.com/okta/api/blob/master/docs/endpoints/events.md @ d526641
 */
/**
 * @method getEvents
 * @param limit
 * @param startDate
 * @param after
 * @param callback
 */
OktaAPI.prototype.getEvents = function(limit, startDate, after, callback) {
    var queryObj = {};
    if(limit != undefined) queryObj.limit = limit;
    if(startDate != undefined) queryObj.startDate = startDate;
    if(after != undefined) queryObj.after = after;
    this.request.get("events", queryObj, callback);
}

/*
 * Okta Group Endpoint
 * https://github.com/okta/api/blob/master/docs/endpoints/groups.md @ d526641
 */
/**
 * Add a new group to Okta
 * @method addGroup
 * @param groupProfile a group profile object, normally constucted with OktaAPI.Helpers.constructGroup()
 * @param callback
 */
OktaAPI.prototype.addGroup = function(groupProfile, callback) {
    if(groupProfile == undefined) throw new Error("A group profile is required when creating a group");
    var body = {};
    body.profile = groupProfile;
    this.request.post("groups", body, null, callback);
}
/**
 * @method getGroups
 * @param search
 * @param callback
 */
OktaAPI.prototype.getGroups = function(search, callback) {
    var queryObj = {};
    if(search != undefined) queryObj.q = search;
    this.request.get("groups", queryObj, callback);
}
/**
 * @method getGroup
 * @param groupId
 * @param callback
 */
OktaAPI.prototype.getGroup = function(groupId, callback) {
    if(groupId == undefined) throw new Error("A group ID is required when getting a group");
    this.request.get("groups/" + groupId, null, callback);
}
/**
 * Update the group's profile.
 * @method updateGroup
 * @param groupId
 * @param groupObj the complete group object, normally constructed with OktaAPI.Helpers.constructGroup()
 * @param callback
 */
OktaAPI.prototype.updateGroup = function(groupId, groupObj, callback) {
    if(groupId == undefined) throw new Error("A group ID is required when updating a group");
    if(groupObj == undefined) throw new Error("A group object is required when updating a group");
    var body = {profile: groupObj};
    this.request.put("groups/" + groupId, body, null, callback);
}
/**
 * Deletes a group from Okta (note: returns no response if successful)
 * @method deleteGroup
 * @param groupId
 * @param callback
 */
OktaAPI.prototype.deleteGroup = function(groupId, callback) {
    if(groupId == undefined) throw new Error("A group ID is required when updating a group");
    this.request.delete("groups/" + groupId, null, callback);
}
/**
 * Get a list of users in the group
 * @method getUsersInGroup
 * @param groupId
 * @param callback
 */
OktaAPI.prototype.getUsersInGroup = function(groupId, callback) {
    if(groupId == undefined) throw new Error("A group ID is required when fetching users in a group");
    this.request.get("groups/" + groupId + "/users", null, callback);
}
/**
 * @method addUserToGroup
 * @param groupId
 * @param userId
 * @param callback
 */
OktaAPI.prototype.addUserToGroup = function(groupId, userId, callback) {
    if(groupId == undefined) throw new Error("A group ID is required to add a user to a group");
    if(userId == undefined) throw new Error("A user ID is required to add a user to a group");
    this.request.put("groups/" + groupId + "/users/" + userId, null, null, callback);
}
/**
 * @method removeUserFromGroup
 * @param groupId
 * @param userId
 * @param callback
 */
OktaAPI.prototype.removeUserFromGroup = function(groupId, userId, callback) {
    if(groupId == undefined) throw new Error("A group ID is required to remove a user from a group");
    if(userId == undefined) throw new Error("A user ID is required to remove a user from a group");
    this.request.delete("groups/" + groupId + "/users/" + userId, null, callback);
}

/*
 * Okta Sessions Endpoint
 * https://github.com/okta/api/blob/master/docs/endpoints/sessions.md @ d526641
 */

/**
 * @method createSession
 * @param user
 * @param pass
 * @param additionalFields
 * @param callback
 */
OktaAPI.prototype.createSession = function(user, pass, additionalFields, callback) {
    if(user == undefined) throw new Error("A username is required when making a new session");
    if(pass == undefined) throw new Error("A password is required when making a new session");
    var queryObj = {};
    if(additionalFields != undefined) queryObj.additionalFields = additionalFields;
    var body = {};
    body.username = user;
    body.password = pass;
    this.request.post("sessions", body, queryObj, callback);
}
/**
 * @method validateSession
 * @param sessionId
 * @param callback
 */
OktaAPI.prototype.validateSession = function(sessionId, callback) {
    if(sessionId == undefined) throw new Error("A session ID is required when validating a session");
    this.request.get("sessions/" + sessionId, null, callback);
}
/**
 * @method extendSession
 * @param sessionId
 * @param callback
 */
OktaAPI.prototype.extendSession = function(sessionId, callback) {
    if(sessionId == undefined) throw new Error("A session ID is required when extending a session");
    this.request.put("sessions/" + sessionId, null, null, callback);
}
/**
 * @method closeSession
 * @param sessionId
 * @param callback
 */
OktaAPI.prototype.closeSession = function(sessionId, callback) {
    if(sessionId == undefined) throw new Error("A session ID is required when closing a session");
    this.request.delete("sessions/" + sessionId, null, callback);
}

/*
 * Helpers and wrappers
 */
/**
 * Performs a partial update on a user's profile
 * @method updateUserPartial
 * @param userId
 * @param partialProfile partial profile info; or null to update password
 * @param partialCredentials partial credentials info; or null to only update profile
 * @param callback
 */
OktaAPI.prototype.updateUserPartial = function(userId, partialProfile, partialCredentials, callback) {
    if(userId == undefined) throw new Error("A user ID is required");
    this.getUser(userId, function(d) {
        if(!d.success || d.resp.errorCode) {
            callback({success: false, error: "Failed to retrieve user", resp: d.resp});
            return;
        }
        mergeProfiles(d.resp, partialProfile, partialCredentials, callback);
    });
}

/*
 * Private methods
 */
function mergeProfiles(userObj, updateProf, updateCreds, callback) {
    var finalProfile, finalCreds;
    if(updateProf != undefined) {
        finalProfile = {};
        for(prop in userObj.profile) finalProfile[prop] = userObj.profile[prop];
        for(prop in updateProf) finalProfile[prop] = updateProf[prop];
    }
    if(updateCreds != undefined) {
        finalCreds = {};
        for(prop in userObj.credentials) finalCreds[prop] = userObj.profile[prop];
        for(prop in updateCreds) finalCreds[prop] = updateCreds[prop];
    }
    this.updateUser(userObj.id, finalProfile, finalCreds, function(d) {
        if(!d.success || d.resp.errorCode) {
            callback({success: false, error: "Failed to update user info", resp: d.resp});
            return;
        }
        callback({success: true, resp: d.resp});
    })
}