/**
 * Created by jjohnson on 12/9/13.
 * Updated by kevin.he on 10/29/2014, categories are correct as of this date
 * 
 */
var NetworkAbstraction = require('./NetworkAbstraction.js');
var OktaAPIUsers = require('./OktaAPIUsers.js');
var OktaAPIGroups = require('./OktaAPIGroups.js');
var OktaAPISessions = require('./OktaAPISessions.js');
var OktaAPIApps = require('./OktaAPIApps.js');
var check = require('check-types');

module.exports = OktaAPI;
OktaAPI.Helpers = require('./OktaHelpers.js');
/**
 * Instantiate a new Okta API session with the given API token
 * @param apiToken
 * @param domain
 * @param preview
 * @constructor
 */
function OktaAPI(apiToken, domain, preview) {
    if(apiToken == undefined || domain == undefined) {
        throw new Error("OktaAPI requires an API token and a domain");
    }
    this.domain = domain;
    if(preview == undefined) this.preview = false;
    else this.preview = preview;
    this.request = new NetworkAbstraction(apiToken, domain, preview);
    this.users = new OktaAPIUsers(apiToken, domain, preview);
    this.groups = new OktaAPIGroups(apiToken, domain, preview);
    this.sessions = new OktaAPISessions(apiToken, domain, preview);
    this.apps = new OktaAPIApps(apiToken, domain, preview);
}

/*******************************************************************
************************ Users->UserOps Start **********************
********************************************************************
*/
/*
 * Okta User Documentation
 * http://developer.okta.com/docs/api/rest/users.html
 */
/**
 * Gets a list of users in your Okta
 * @method getUsers
 * @param search an object with search parameters in this format: {q: <query>, limit: <int>, filter: <filter>, after: <cursor>}
 *          more docs can be found on the Okta User Endpoint documentation
 * @param callback
 */
OktaAPI.prototype.getUsers = function(search, followLink, callback) {
    this.users.list(search, followLink, callback);
}
/**
 * Searches your Okta for a specific user
 * @method getUser
 * @param who search query
 * @param callback
 */
OktaAPI.prototype.getUser = function(who, callback) {
    this.users.get(who, callback);
}
/**
 * Provisions a user to your Okta
 * @method addUser
 * @param profile a profile object, usually generated by OktaAPI.Helpers.constructProfile()
 * @param credentials a credentials object, usually generated by OktaAPI.Helpers.constructCredentials()
 * @param activate whether or not to fully activate this account
 * @param callback
 */
OktaAPI.prototype.addUser = function(profile, credentials, activate, callback) {
    this.users.add(profile, credentials, activate, callback);
}
/**
 * Update a user's profile
 * @method updateUser
 * @param id id of the user to update
 * @param profile the new, complete profile of this user
 * @param credentials the new, complete credentials of this user
 * @param callback
 */
OktaAPI.prototype.updateUser = function(id, profile, credentials, callback) {
    this.users.update(id, profile, credentials, callback);
}

/*******************************************************************
************************ Users->UserOps End ************************
********************************************************************
*/


/*******************************************************************
****************** Users->Related Resources Start ******************
********************************************************************
*/

/**
 * Get the apps that this user has on their dashboard
 * @method getAppLinks
 * @param id id of the user
 * @param callback
 */
OktaAPI.prototype.getAppLinks = function(id, callback) {
    this.users.getApps(id, callback);
}
/**
 * get the groups that this user is in
 * @method getMemberGroups
 * @param id
 * @param callback
 */
OktaAPI.prototype.getMemberGroups = function(id, callback) {
    this.users.getGroups(id, callback);
}

/*******************************************************************
****************** Users->Related Resources End ********************
********************************************************************
*/

/*******************************************************************
**************** Users->Lifecycle Operations Start *****************
********************************************************************
*/

/**
 * fully activate a user
 * @method activateUser
 * @param id the ID of the user
 * @param sendEmail whether or not to send the activation e-mail
 * @param callback
 */
OktaAPI.prototype.activateUser = function(id, sendEmail, callback) {
    this.users.activate(id, sendEmail, callback);
}
/**
 * deactivate a user; destructively deprovisioning all their accounts
 * @method deactivateUser
 * @param id
 * @param callback
 */
OktaAPI.prototype.deactivateUser = function(id, callback) {
    this.users.deactivate(id, callback);
}
/**
 * Nullify a lockout from too many failed passwords
 * @method unlockUser
 * @param id
 * @param callback
 */
OktaAPI.prototype.unlockUser = function(id, callback) {
    this.users.unlock(id, callback);
}
/**
 * Have Okta generate a one-time-token for a password reset
 * @method resetPassword
 * @param id
 * @param sendEmail send an email with the reset token
 * @param callback
 */
OktaAPI.prototype.resetPassword = function(id, sendEmail, callback) {
    this.users.resetPassword(id, sendEmail, callback);
}
/**
 * Forces user to change thier password on next login
 * @method resetPassword
 * @param id
 * @param tempPassword response will contain temp password
 * @param callback
 */
OktaAPI.prototype.expirePassword = function(id, tempPassword, callback) {
    this.users.expirePassword(id, tempPassword, callback);
}
/**
 * Forces user to change thier password on next login
 * @method resetPassword
 * @param id
 * @param callback
 */
OktaAPI.prototype.resetFactors = function(id, callback) {
    this.users.resetFactors(id, callback);
}


/*******************************************************************
**************** Users->Lifecycle Operations End *******************
********************************************************************
*/


/*******************************************************************
*************** Users->Credential Operations Start *****************
********************************************************************
*/

/**
 * Have Okta generate a one-time-token for the forgotten password flow (requires security question)
 * @method forgotPassword
 * @param id
 * @param sendEmail
 * @param callback
 */
OktaAPI.prototype.forgotPassword = function(id, sendEmail, callback) {
    this.users.forgotPasswordToken(id, sendEmail, callback);
}
/**
 * Sets a new password for a user by validating the recoveryQuestionObj against Okta
 * @method attemptResetPassword
 * @param id
 * @param passwordObj
 * @param recoveryQuestionObj
 * @param callback
 */
OktaAPI.prototype.attemptResetPassword = function(id, passwordObj, recoveryQuestionObj, callback) {
    this.users.forgotPasswordRecovery(id, passwordObj, recoveryQuestionObj, callback);
}
/**
 * Validates the provided password against Okta and changes it to the new password
 * @method attemptChangePassword
 * @param id
 * @param oldPasswordObj
 * @param newPasswordObj
 * @param callback
 */
OktaAPI.prototype.attemptChangePassword = function(id, oldPasswordObj, newPasswordObj, callback) {
    this.users.changePassword(id, oldPasswordObj, newPasswordObj, callback);
}
/**
 * Validates the provided password against Okta and changes the recovery question
 * @method attemptChangeRecoveryQuestion
 * @param id
 * @param passwordObj
 * @param recoveryQuestionObj
 * @param callback
 */
OktaAPI.prototype.attemptChangeRecoveryQuestion = function(id, passwordObj, recoveryQuestionObj, callback) {
    this.users.changeRecoveryQuestion(id, passwordObj, recoveryQuestionObj, callback);
}

/*******************************************************************
*************** Users->Credential Operations End *******************
********************************************************************
*/


/*******************************************************************
***************** Groups->Group Operations Start *******************
********************************************************************
*/
/*
 * Okta Group Documentation
 * http://developer.okta.com/docs/api/rest/groups.html
 */
/**
 * Add a new group to Okta
 * @method addGroup
 * @param groupProfile a group profile object, normally constucted with OktaAPI.Helpers.constructGroup()
 * @param callback
 */
OktaAPI.prototype.addGroup = function(groupProfile, callback) {
    this.groups.add(groupProfile, callback);
}
/**
 * @method getGroup
 * @param groupId
 * @param callback
 */
OktaAPI.prototype.getGroup = function(groupId, callback) {
    this.groups.get(groupId, callback);
}
/**
 * @method getGroups
 * @param search
 * @param callback
 */
OktaAPI.prototype.getGroups = function(search, followLink, callback) {
    this.groups.list(search, followLink, callback);
}
/**
 * Update the group's profile.
 * @method updateGroup
 * @param groupId
 * @param groupObj the complete group object, normally constructed with OktaAPI.Helpers.constructGroup()
 * @param callback
 */
OktaAPI.prototype.updateGroup = function(groupId, groupObj, callback) {
    this.groups.update(groupId, groupObj, callback);
}
/**
 * Deletes a group from Okta (note: returns no response if successful)
 * @method deleteGroup
 * @param groupId
 * @param callback
 */
OktaAPI.prototype.deleteGroup = function(groupId, callback) {
    this.groups.delete(groupId, callback);
}

/*******************************************************************
***************** Groups->Group Operations End *********************
********************************************************************
*/

/*******************************************************************
************ Groups->Group Member Operations Start *****************
********************************************************************
*/

/**
 * Get a list of users in the group
 * @method getUsersInGroup
 * @param groupId
 * @param callback
 */
OktaAPI.prototype.getUsersInGroup = function(groupId, queryObj, followLink, callback) {
    this.groups.getUsers(groupId, queryObj, followLink, callback);
}
/**
 * @method addUserToGroup
 * @param groupId
 * @param userId
 * @param callback
 */
OktaAPI.prototype.addUserToGroup = function(groupId, userId, callback) {
    this.groups.addUser(groupId, userId, callback);
}
/**
 * @method removeUserFromGroup
 * @param groupId
 * @param userId
 * @param callback
 */
OktaAPI.prototype.removeUserFromGroup = function(groupId, userId, callback) {
    this.groups.removeUser(groupId, userId, callback);
}


/*******************************************************************
************ Groups->Group Member Operations End *******************
********************************************************************
*/

/*******************************************************************
**************** Groups->Related Resources Start *******************
********************************************************************
*/

/**
 * @method getAppsForGroup
 * @param groupId
 * @param search
 * @param callback
 */
OktaAPI.prototype.getAppsForGroup = function(groupId, search, followLink, callback) {
    this.groups.getApps(groupId, search, followLink);
}

/*******************************************************************
***************** Groups->Related Resources End ********************
********************************************************************
*/



/*******************************************************************
*************** Session->Session Operations Start ******************
********************************************************************
*/
/*
 * Okta Sessions Documentation
 * http://developer.okta.com/docs/api/rest/sessions.html
 */

/**
 * @method createSession - now just a wrapper to call sessions.create()
 * @param user
 * @param pass
 * @param additionalFields
 * @param callback
 */
OktaAPI.prototype.createSession = function(user, pass, additionalFields, callback) {
    this.sessions.create(user, pass, additionalFields, callback);
}
/**
 * @method validateSession
 * @param sessionId
 * @param callback
 */
OktaAPI.prototype.validateSession = function(sessionId, callback) {
    this.sessions.validate(sessionId, callback);
}
/**
 * @method extendSession
 * @param sessionId
 * @param callback
 */
OktaAPI.prototype.extendSession = function(sessionId, callback) {
    this.sessions.extend(sessionId, callback);
}
/**
 * @method closeSession
 * @param sessionId
 * @param callback
 */
OktaAPI.prototype.closeSession = function(sessionId, callback) {
    this.sessions.close(sessionId, callback);
}

/*******************************************************************
**************** Session->Session Operations End *******************
********************************************************************
*/

/*******************************************************************
*************** Apps->Application Operations Start *****************
********************************************************************
*/

/*
 * Okta Applications Documentation
 * http://developer.okta.com/docs/api/rest/apps.html
 */
 /**
  * @method addApplication
  * @param appModel an app model per Okta docs
  * @param callback
  */
 OktaAPI.prototype.addApplication = function(appModel, callback) {
    this.apps.add(appModel, callback);
 }

/**
 * @method getApplication
 * @param id an application ID to get
 * @param callback
 */
 OktaAPI.prototype.getApplication = function(id, callback) {
    this.apps.get(id, callback);
 }

/**
 * @method getApplications
 * @param queryObj an object to filter search; refer to Okta docs
 * @param callback - paged response; callback can be called several times
 */
 OktaAPI.prototype.getApplications = function(queryObj, callback) {
    this.apps.list(queryObj, callback);
 }

 /**
  * @method updateApplication
  * @param id
  * @param profile
  */
OktaAPI.prototype.updateApplication = function(id, profile, callback) {
    this.apps.update(id, profile, callback);
}

/**
 * @method deleteApplication removes a deactivated application
 * @param id
 * @param callback
 */
OktaAPI.prototype.deleteApplication = function(id, callback) {
    this.apps.delete(id, callback);
}

/*******************************************************************
**************** Apps->Application Operations End ******************
********************************************************************
*/

/*******************************************************************
*********** Apps->Application Lifecycle Operations Start ***********
********************************************************************
*/

/**
 * @method activateApplication
 * @param id
 * @param callback
 */
OktaAPI.prototype.activateApplication = function(id, callback) {
    this.apps.activate(id, callback);
}

/**
 * @method deactivateApplication
 * @param id
 * @param callback
 */
OktaAPI.prototype.deactivateApplication = function(id, callback) {
    this.apps.deactivate(id, callback);
}

/*******************************************************************
************ Apps->Application Lifecycle Operations End ************
********************************************************************
*/



/*******************************************************************
************ Apps->Application User Operations Start ***************
********************************************************************
*/

/**
 * @method assignUserToApplication - assigns a user to an app
 * @param appId - the id of the App you assign the user to
 * @param appUserModel - the user that you want to assign to the app
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.assignUserToApplication = function(appId, appUserModel, callback) {
    this.apps.assignUser(appId, appUserModel, callback); 
}



/**
 * @method getAssignedUserForApplication - gets one user that has been assigned to app
 * @param appId - the id of the App you want the user from
 * @param uid - the user that you want to get from the app
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.getAssignedUserForApplication = function(appId, uid, callback) {
    this.apps.getAssignedUser(appId, uid, callback);
}


/**
 * @method getUsersAssignedToApplication - gets all users that has been assigned to app
 * @param id - the id of the App you want the users from
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.getUsersAssignedToApplication = function(id, callback) {
    this.apps.listUsersAssigned(id, callback);
}


/**
 * @method updateCredsForApplication - updates a user's credentials for an application
 * @param aid - the id of the App you want the credentials updated for 
 * @param uid - the id of the user you want the credentials updated for 
 * @param appUserModel - the credentials that you want to update to 
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.updateCredsForApplication = function(aid, uid, appUserModel, callback) {
    this.apps.updateAppCredsForUser(aid, uid, appUserModel, callback);
}


/**
 * @method updateCredsForApplication - updates a user's credentials for an application
 * @param aid - the id of the App you want the credentials updated for 
 * @param uid - the id of the user you want the credentials updated for 
 * @param appUserModel - the credentials that you want to update to 
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.updateProfileForApplication = function(aid, uid, appUserModel, callback) {
    this.apps.updateAppProfileForUser(aid, uid, appUserModel, callback);
}

/**
 * @method removeUserFromApplication - removes a user credentials form an application
 * @param aid - the id of the App you want the user removed for 
 * @param uid - the id of the user you want removed
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.removeUserFromApplication = function(aid, uid, callback) {
    if(aid == undefined) throw new Error("An application ID is required when removing a user from an app");
    if(uid == undefined) throw new Error("A user ID is required when removing a user from an app");
    this.request.delete("apps/ " + aid + "/users/" + uid, null, callback);
}



/*******************************************************************
************* Apps->Application User Operations End ****************
********************************************************************
*/

/*******************************************************************
*********** Apps->Application Group Operations Start ***************
********************************************************************
*/

/**
 * @method assignApplicationToGroup - assigns a group to use an app
 * @param aid - the id of the App you want the group assigned to 
 * @param gid - the id of the group you want to assign
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.assignApplicationToGroup = function(aid, gid, callback) {
    // TODO: there is an optional "appgroup" param. Figure out what it does and how to use it.
    if(aid == undefined) throw new Error("An application ID is required when assigning an application to a group");
    if(gid == undefined) throw new Error("A group ID is required when assigning an application to a group");
    this.request.put("apps/" + aid + "/groups/" + gid, {}, null, callback);
}

/**
 * @method getGroupAssignedToApplication - get a group assigned to an app
 * @param aid - the id of the App the group is assigned to 
 * @param gid - the id of the group you want to get
 * @param callback - paged response; callback can be called several times
 */
OktaAPI.prototype.getGroupAssignedToApplication = function(aid, gid, callback) {
    if(aid == undefined) throw new Error("Application ID is required when getting a group assigned to an application");
    if(gid == undefined) throw new Error("A group ID is required when getting a group assigned to an application");
    this.request.get("apps/" + aid + "/groups/" + gid, null, callback);
}

/**
 * @method getGroupsAssignedToApplication - get all groups assigned to an app
 * @param aid - the id of the App the groups are assigned to 
 * @param queryObj - filters for the list of groups returned
 * @param callback - paged response; callback can be called several times
 */

OktaAPI.prototype.getGroupsAssignedToApplication = function(aid, queryObj, callback) {
    if(aid == undefined) throw new Error("An application ID is required when getting the groups assigned to an application");
    this.request.get("apps/" + aid + "/groups", queryObj, callback);
}

/**
 * @method removeGroupFromApplication - removes a group from an app
 * @param aid - the id of the App the groups is assigned to 
 * @param gid - the id of the group you want removed
 * @param callback - paged response; callback can be called several times
 */

OktaAPI.prototype.removeGroupFromApplication = function(aid, gid, callback) {
    if(aid == undefined) throw new Error("An application ID is required when unassigning an application to a group");
    if(gid == undefined) throw new Error("A group ID is required when unassigning an application to a group");
    this.request.delete("apps/" + aid + "/groups/" + gid, null, null, callback);
}



/*******************************************************************
***************** Events->Event Operations Start *******************
********************************************************************
*/

/*
 * Okta Events Endpoint
 * http://developer.okta.com/docs/api/rest/events.html
 */
/**
 * @method getEvents
 * @param filter
 * @param limit
 * @param startDate
 * @param callback
 */
OktaAPI.prototype.getEvents = function(queryObj, followLink, callback) {
    this.request.get("events", queryObj, followLink, callback);
}


/*******************************************************************
***************** Events->Event Operations End *********************
********************************************************************
*/

/*******************************************************************
**************** Function Pseudo-Aliasing Start ********************
********************************************************************
*/

/**
* Sets up alias' so that function names reflect the Okta Documentation
* maybe unnecessary, we might want devs to call OktaAPI.users.*;
*/
OktaAPI.prototype.listUsers = OktaAPI.prototype.getUsers;
OktaAPI.prototype.createUser = OktaAPI.prototype.addUser;
OktaAPI.prototype.getAssignedAppLinks = OktaAPI.prototype.getAppLinks;
OktaAPI.prototype.changeRecoveryQuestion = OktaAPI.prototype.attemptChangeRecoveryQuestion;

OktaAPI.prototype.listGroups = OktaAPI.prototype.getGroups;
OktaAPI.prototype.removeGroup = OktaAPI.prototype.deleteGroup;
OktaAPI.prototype.listGroupMembers = OktaAPI.prototype.getUsersInGroup;
OktaAPI.prototype.listAssignedApps = OktaAPI.prototype.getAppsForGroup;

OktaAPI.prototype.listApps = OktaAPI.prototype.getApplications;
OktaAPI.prototype.listUsersAssignedtoApp = OktaAPI.prototype.getUsersAssignedToApplication;
OktaAPI.prototype.updateAppCredsForAssignedUser = OktaAPI.prototype.updateCredsForApplication;
OktaAPI.prototype.assignGroupToApp = OktaAPI.prototype.assignApplicationToGroup;
OktaAPI.prototype.getAssignedGroupForApp = OktaAPI.prototype.getGroupAssignedToApplication;
OktaAPI.prototype.listGroupsAssignedtoApp = OktaAPI.prototype.getGroupsAssignedToApplication;

OktaAPI.prototype.listEvents = OktaAPI.prototype.getEvents;

/*******************************************************************
***************** Function Pseudo-Aliasing End *********************
********************************************************************
*/

/*
 * Helpers and wrappers
 */
/**
 * Performs a partial update on a user's profile
 * @method updateUserPartial
 * @param userId
 * @param partialProfile partial profile info; or null to update password
 * @param partialCredentials partial credentials info; or null to only update profile
 * @param callback
 */
OktaAPI.prototype.updateUserPartial = function(userId, partialProfile, partialCredentials, callback) {
    if(userId == undefined) throw new Error("A user ID is required");
    var that = this;
    this.getUser(userId, function(d) {
        if(!d.success || d.resp.errorCode) {
            callback({success: false, error: "Failed to retrieve user", resp: d.resp});
            return;
        }
        mergeProfiles(that, d.resp, partialProfile, partialCredentials, callback);
    });
}

/*
 * Private methods
 */
function mergeProfiles(what, userObj, updateProf, updateCreds, callback) {
    var finalProfile, finalCreds;
    if(updateProf != undefined) {
        finalProfile = {};
        for(prop in userObj.profile) finalProfile[prop] = userObj.profile[prop];
        for(prop in updateProf) finalProfile[prop] = updateProf[prop];
    }
    if(updateCreds != undefined) {
        finalCreds = {};
        for(prop in userObj.credentials) finalCreds[prop] = userObj.profile[prop];
        for(prop in updateCreds) finalCreds[prop] = updateCreds[prop];
    }
    what.updateUser(userObj.id, finalProfile, finalCreds, function(d) {
        if(!d.success || d.resp.errorCode) {
            callback({success: false, error: "Failed to update user info", resp: d.resp});
            return;
        }
        callback({success: true, resp: d.resp});
    })
}
